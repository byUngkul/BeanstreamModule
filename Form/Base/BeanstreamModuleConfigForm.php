<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace BeanstreamModule\Form\Base;

use BeanstreamModule\BeanstreamModule;
use Thelia\Form\BaseForm;
use BeanstreamModule\Model\Config\BeanstreamModuleConfigValue;
use Symfony\Component\Validator\Constraints\NotBlank;

/**
 * Class BeanstreamModuleConfigForm
 * @package BeanstreamModule\Form\Base
 * @author TheliaStudio
 */
class BeanstreamModuleConfigForm extends BaseForm
{
    const FORM_NAME = "beanstreammodule_config_form";

    /**
     *
     * in this function you add all the fields you need for your Form.
     * Form this you have to call add method on $this->formBuilder attribute :
     *
     * $this->formBuilder->add("name", "text")
     *   ->add("email", "email", array(
     *           "attr" => array(
     *               "class" => "field"
     *           ),
     *           "label" => "email",
     *           "constraints" => array(
     *               new \Symfony\Component\Validator\Constraints\NotBlank()
     *           )
     *       )
     *   )
     *   ->add('age', 'integer');
     *
     * @return null
     */
    protected function buildForm()
    {
        $translationKeys = $this->getTranslationKeys();
        $fieldsIdKeys = $this->getFieldsIdKeys();

        $this->addMerchantIdField($translationKeys, $fieldsIdKeys);
        $this->addPasscodeField($translationKeys, $fieldsIdKeys);
        $this->addMinAmountField($translationKeys, $fieldsIdKeys);
        $this->addMaxAmountField($translationKeys, $fieldsIdKeys);
    }

    protected function addMerchantIdField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("merchant_id", "text", array(
                "label" => $this->readKey("merchant_id", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("merchant_id", $fieldsIdKeys),
                    "help" => $this->readKey("help.merchant_id", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => BeanstreamModule::getConfigValue(BeanstreamModuleConfigValue::MERCHANT_ID),
            ))
        ;
    }

    protected function addPasscodeField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("passcode", "text", array(
                "label" => $this->readKey("passcode", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("passcode", $fieldsIdKeys),
                    "help" => $this->readKey("help.passcode", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => BeanstreamModule::getConfigValue(BeanstreamModuleConfigValue::PASSCODE),
            ))
        ;
    }

    protected function addMinAmountField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("min_amount", "number", array(
                "label" => $this->readKey("min_amount", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("min_amount", $fieldsIdKeys),
                    "help" => $this->readKey("help.min_amount", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => BeanstreamModule::getConfigValue(BeanstreamModuleConfigValue::MIN_AMOUNT),
            ))
        ;
    }

    protected function addMaxAmountField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("max_amount", "number", array(
                "label" => $this->readKey("max_amount", $translationKeys),
                "label_attr" => [
                    "for" => $this->readKey("max_amount", $fieldsIdKeys),
                    "help" => $this->readKey("help.max_amount", $translationKeys)
                ],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => BeanstreamModule::getConfigValue(BeanstreamModuleConfigValue::MAX_AMOUNT),
            ))
        ;
    }

    public function getName()
    {
        return static::FORM_NAME;
    }

    public function readKey($key, array $keys, $default = '')
    {
        if (isset($keys[$key])) {
            return $keys[$key];
        }

        return $default;
    }

    public function getTranslationKeys()
    {
        return array();
    }

    public function getFieldsIdKeys()
    {
        return array(
            "merchant_id" => "merchant_id",
            "passcode" => "passcode",
            "min_amount" => "min_amount",
            "max_amount" => "max_amount",
        );
    }
}
