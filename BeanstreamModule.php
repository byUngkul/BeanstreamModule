<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace BeanstreamModule;

use BeanstreamModule\Model\Config\BeanstreamModuleConfigValue;
use Thelia\Model\Order;
use Thelia\Module\AbstractPaymentModule;
use Thelia\Module\BaseModule;
use Propel\Runtime\Connection\ConnectionInterface;
use Thelia\Install\Database;

/**
 * Class BeanstreamModule
 * @package BeanstreamModule
 */
class BeanstreamModule extends AbstractPaymentModule
{
    const MESSAGE_DOMAIN = "beanstreammodule";
    const ROUTER = "router.beanstreammodule";

    const BASE_URL = "https://www.beanstream.com/api/v1";
    const BEANSTREAM_ORDER_ID = 'beanstream.order.id';

    public function postActivation(ConnectionInterface $con = null)
    {
        if (!self::getConfigValue('is_initialized', false)) {
            $database = new Database($con);

            $database->insertSql(null, [__DIR__ . "/Config/create.sql", __DIR__ . "/Config/insert.sql"]);
            self::setConfigValue('is_initialized', true);
        }

        /* insert the images from image folder if not already done */
        $moduleModel = $this->getModuleModel();

        if (! $moduleModel->isModuleImageDeployed($con)) {
            $this->deployImageFolder($moduleModel, sprintf('%s/images', __DIR__), $con);
        }
    }

    /**
     *
     *  Method used by payment gateway.
     *
     *  If this method return a \Thelia\Core\HttpFoundation\Response instance, this response is send to the
     *  browser.
     *
     *  In many cases, it's necessary to send a form to the payment gateway. On your response you can return this form already
     *  completed, ready to be sent
     *
     * @param  \Thelia\Model\Order $order processed order
     * @return null|\Thelia\Core\HttpFoundation\Response
     */
    public function pay(Order $order)
    {
        if ($this->isValidPayment()) {
            $this->getRequest()->getSession()->set(self::BEANSTREAM_ORDER_ID, $order->getId());
            return $this->generateGatewayFormResponse($order, '', []);
        }
    }



    /**
     *
     * This method is call on Payment loop.
     *
     * If you return true, the payment method will de display
     * If you return false, the payment method will not be display
     *
     * @return boolean
     */
    public function isValidPayment()
    {
        return ($this->isDevEnvironment() || $this->isSslEnabled()) && $this->isValidAmount();
    }

    /**
     * return true if the current environment is in Dev mode
     *
     * @return bool
     */
    protected function isDevEnvironment()
    {
        return 'dev' == $this->getContainer()->getParameter('kernel.environment');
    }

    /**
     * return true if SSL is enabled
     *
     * @return bool
     */
    protected function isSslEnabled()
    {
        return $this->getRequest()->isSecure();
    }

    protected function isValidAmount()
    {
        $minAmount = self::getConfigValue(BeanstreamModuleConfigValue::MIN_AMOUNT);
        $maxAmount = self::getConfigValue(BeanstreamModuleConfigValue::MAX_AMOUNT);

        $amount = $this->getOrdertotalAmount();

        return $amount >= $minAmount && $amount <= $maxAmount;
    }

    /**
     * calculate the total order amount
     *
     * @return float|int
     */
    protected function getOrdertotalAmount()
    {
        $session = $this->getRequest()->getSession();
        $order =  $session->getOrder();
        $cart = $session->getSessionCart($this->getContainer()->get('event_dispatcher'));

        $total = $cart->getTaxedAmount($this->getContainer()->get('thelia.taxEngine')->getDeliveryCountry());

        $total += $order->getPostage();

        return $total;
    }
}
