<?php
/**
* This class has been generated by TheliaStudio
* For more information, see https://github.com/thelia-modules/TheliaStudio
*/

namespace BeanstreamModule;

use Thelia\Model\Order;
use Thelia\Module\AbstractPaymentModule;
use Thelia\Module\BaseModule;
use Propel\Runtime\Connection\ConnectionInterface;
use Thelia\Install\Database;

/**
 * Class BeanstreamModule
 * @package BeanstreamModule
 */
class BeanstreamModule extends AbstractPaymentModule
{
    const MESSAGE_DOMAIN = "beanstreammodule";
    const ROUTER = "router.beanstreammodule";

    const BASE_URL = "https://www.beanstream.com/api/v1";

    const BEANSTREAM_ORDER_ID = 'beanstream.order.id';

    /**
     *
     *  Method used by payment gateway.
     *
     *  If this method return a \Thelia\Core\HttpFoundation\Response instance, this response is send to the
     *  browser.
     *
     *  In many cases, it's necessary to send a form to the payment gateway. On your response you can return this form already
     *  completed, ready to be sent
     *
     * @param  \Thelia\Model\Order $order processed order
     * @return null|\Thelia\Core\HttpFoundation\Response
     */
    public function pay(Order $order)
    {
        if ($this->isValidPayment()) {
            $this->getRequest()->getSession()->set(self::BEANSTREAM_ORDER_ID, $order->getId());
            return $this->generateGatewayFormResponse($order, '', []);
        }
    }



    /**
     *
     * This method is call on Payment loop.
     *
     * If you return true, the payment method will de display
     * If you return false, the payment method will not be display
     *
     * @return boolean
     */
    public function isValidPayment()
    {
        return $this->isDevEnvironment() || $this->isSslEnabled();
    }

    /**
     * return true if the current environment is in Dev mode
     *
     * @return bool
     */
    private function isDevEnvironment()
    {
        return 'dev' == $this->getContainer()->getParameter('kernel.environment');
    }

    /**
     * return true if SSL is enabled
     *
     * @return bool
     */
    private function isSslEnabled()
    {
        return $this->getRequest()->isSecure();
    }
}
